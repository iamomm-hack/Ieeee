#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};
struct Node *rear=NULL;

void enqueue(int value){
    struct Node *newNode=(struct Node *)malloc(sizeof(struct Node));
    newNode->data=value;
    newNode->next=NULL;

    if (rear==NULL) {
        rear=newNode;
        rear->next=rear;
    } else {
        newNode->next=rear->next;
        rear->next=newNode;
        rear=newNode;
    }
    printf("%d Enqueued to queue\n", value);
}

void dequeue() {
    if (rear==NULL) {
        printf("Queue empty\n");
        return;
    }
    struct Node *temp=rear->next;
    if (rear->next==rear) {
        printf("Deleted = %d\n", temp->data);
        free(temp);
        rear = NULL;
    } else {
        printf("Deleted = %d\n", temp->data);
        rear->next = temp->next;
        free(temp);
    }
}

void display() {
    if (rear==NULL) {
        printf("Queue empty!\n");
        return;
    }
    struct Node *temp=rear->next;
    printf("Queue= ");
    do {
        printf("%d ", temp->data);
        temp=temp->next;
    } while (temp!=rear->next);
    printf("\n");
}

int main() {
    int choice, value;
    while (1) {
        printf("Circular LL --->\n");
        printf("1.enqueue\n");
        printf("2.dequeue\n");
        printf("3.display\n");
        printf("4.exit\n");
        printf("Enter your choice= ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter value to enqueue= ");
            scanf("%d", &value);
            enqueue(value);
            break;
        case 2:
            dequeue();
            break;
        case 3:
            display();
            break;
        case 4:
            printf("exiting...\n");
            exit(0);
        default:
            printf("Invalid choice,,try again\n");
        }
    }
    return 0;
}
