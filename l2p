#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node *next;
};
struct Node *rear = NULL;

void enqueue(int value) {
    struct Node *newnode = (struct Node*)malloc(sizeof(struct Node));
    newnode->data = value;
    if (rear == NULL) {
        rear = newnode;
        rear->next = rear;
    } else {
        newnode->next = rear->next;
        rear->next = newnode;
        rear = newnode;
    }
    printf("Inserted %d\n", value);
}

void dequeue() {
    if (rear == NULL) {
        printf("Queue Empty\n");
        return;
    }
    struct Node *temp = rear->next;
    if (rear->next == rear) {
        printf("Deleted %d\n", temp->data);
        rear = NULL;
    } else {
        printf("Deleted %d\n", temp->data);
        rear->next = temp->next;
    }
    free(temp);
}

void display() {
    if (rear == NULL) {
        printf("Queue Empty\n");
        return;
    }
    struct Node *temp = rear->next;
    printf("Queue: ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != rear->next);
    printf("\n");
}

void peek() {
    if (rear == NULL)
        printf("Queue Empty\n");
    else
        printf("Front element: %d\n", rear->next->data);
}

int main() {
    int ch, val;
    while (1) {
        printf("\n1.Enqueue\n2.Dequeue\n3.Display\n4.Peek\n5.Exit\n");
        printf("Enter choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &val);
                enqueue(val);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                peek();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid\n");
        }
    }
    return 0;
}
